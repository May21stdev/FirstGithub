/* eslint max-len: 0 */
// A recursive descent parser operates by defining functions for all
// syntactic elements, and recursively calling those, each function
// advancing the input stream and returning an AST node. Precedence
// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
// instead of `(!x)[1]` is handled by the fact that the parser
// function that parses unary prefix operators is called first, and
// in turn calls the function that parses `[]` subscripts â€” that
// way, it'll receive the node for `x[1]` already parsed, and wraps
// *that* in the unary operator node.
//
// Acorn uses an [operator precedence parser][opp] to handle binary
// operator precedence, because it is much more compact than using
// the technique outlined above, which uses different, nesting
// functions to specify precedence, for all of the ten binary
// precedence levels that JavaScript defines.
//
// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser
import { flowParseArrow, flowParseFunctionBodyAndFinish, flowParseMaybeAssign, flowParseSubscripts, flowParseVariance, flowStartParseAsyncArrowFromCallExpression, flowStartParseObjPropValue, } from "../plugins/flow";
import { jsxParseElement } from "../plugins/jsx";
import { typedParseConditional, typedParseParenItem } from "../plugins/types";
import { tsParseArrow, tsParseFunctionBodyAndFinish, tsParseMaybeAssign, tsParseSubscript, tsParseType, tsParseTypeAssertion, tsStartParseAsyncArrowFromCallExpression, tsStartParseNewArguments, tsStartParseObjPropValue, } from "../plugins/typescript";
import { eat, IdentifierRole, lookaheadType, match, next, nextTemplateToken, retokenizeSlashAsRegex, runInTypeContext, } from "../tokenizer";
import { getNextContextId, hasPlugin, raise, state } from "./base";
import { parseMaybeDefault, parseRest, parseSpread } from "./lval";
import { parseBlock, parseClass, parseDecorators, parseFunction, parseFunctionParams, } from "./statement";
import { canInsertSemicolon, eatContextual, expect, hasPrecedingLineBreak, isContextual, unexpected, } from "./util";
// ### Expression parsing
// These nest, from the most general expression type at the top to
// 'atomic', nondivisible expression types at the bottom. Most of
// the functions will simply let the function (s) below them parse,
// and, *if* the syntactic construct they handle is present, wrap
// the AST node that the inner parser gave them in another node.
// Parse a full expression. The optional arguments are used to
// forbid the `in` operator (in for loops initialization expressions)
// and provide reference for storing '=' operator inside shorthand
// property assignment in contexts where both object expression
// and object pattern might appear (so it's possible to raise
// delayed syntax error at correct position).e
export function parseExpression(noIn) {
    parseMaybeAssign(noIn);
    if (match(7168 /* comma */)) {
        while (eat(7168 /* comma */)) {
            parseMaybeAssign(noIn);
        }
    }
}
export function parseMaybeAssign(noIn = null, afterLeftParse) {
    if (hasPlugin("typescript")) {
        return tsParseMaybeAssign(noIn, afterLeftParse);
    }
    else if (hasPlugin("flow")) {
        return flowParseMaybeAssign(noIn, afterLeftParse);
    }
    else {
        return baseParseMaybeAssign(noIn, afterLeftParse);
    }
}
// Parse an assignment expression. This includes applications of
// operators like `+=`.
// Returns true if the expression was an arrow function.
export function baseParseMaybeAssign(noIn = null, afterLeftParse) {
    if (match(43536 /* _yield */)) {
        parseYield();
        if (afterLeftParse) {
            afterLeftParse();
        }
        return false;
    }
    if (match(6144 /* parenL */) || match(2048 /* name */) || match(43536 /* _yield */)) {
        state.potentialArrowAt = state.start;
    }
    const wasArrow = parseMaybeConditional(noIn);
    if (afterLeftParse) {
        afterLeftParse();
    }
    if (state.type & 32 /* IS_ASSIGN */) {
        next();
        parseMaybeAssign(noIn);
        return false;
    }
    return wasArrow;
}
// Parse a ternary conditional (`?:`) operator.
// Returns true if the expression was an arrow function.
function parseMaybeConditional(noIn) {
    const startPos = state.start;
    const wasArrow = parseExprOps(noIn);
    if (wasArrow) {
        return true;
    }
    parseConditional(noIn, startPos);
    return false;
}
function parseConditional(noIn, startPos) {
    if (hasPlugin("typescript") || hasPlugin("flow")) {
        typedParseConditional(noIn, startPos);
    }
    else {
        baseParseConditional(noIn, startPos);
    }
}
export function baseParseConditional(noIn, startPos) {
    if (eat(9728 /* question */)) {
        parseMaybeAssign();
        expect(8192 /* colon */);
        parseMaybeAssign(noIn);
    }
}
// Start the precedence parser.
// Returns true if this was an arrow function
function parseExprOps(noIn) {
    const wasArrow = parseMaybeUnary();
    if (wasArrow) {
        return true;
    }
    parseExprOp(-1, noIn);
    return false;
}
// Parse binary operators with the operator precedence parsing
// algorithm. `left` is the left-hand side of the operator.
// `minPrec` provides context that allows the function to stop and
// defer further parser to one of its callers when it encounters an
// operator that has a lower precedence than the set it is parsing.
function parseExprOp(minPrec, noIn) {
    if (hasPlugin("typescript") &&
        (45592 /* _in */ & 15 /* PRECEDENCE_MASK */) > minPrec &&
        !hasPrecedingLineBreak() &&
        eatContextual(2 /* _as */)) {
        state.tokens[state.tokens.length - 1].type = 53264 /* _as */;
        runInTypeContext(1, () => {
            tsParseType();
        });
        parseExprOp(minPrec, noIn);
        return;
    }
    const prec = state.type & 15 /* PRECEDENCE_MASK */;
    if (prec > 0 && (!noIn || !match(45592 /* _in */))) {
        if (prec > minPrec) {
            const op = state.type;
            next();
            if (op === 16897 /* pipeline */) {
                // Support syntax such as 10 |> x => x + 1
                state.potentialArrowAt = state.start;
            }
            parseMaybeUnary();
            parseExprOp(op & 64 /* IS_RIGHT_ASSOCIATIVE */ ? prec - 1 : prec, noIn);
            parseExprOp(minPrec, noIn);
        }
    }
}
// Parse unary operators, both prefix and postfix.
// Returns true if this was an arrow function.
export function parseMaybeUnary() {
    if (hasPlugin("typescript") && !hasPlugin("jsx") && eat(21000 /* lessThan */)) {
        tsParseTypeAssertion();
        return false;
    }
    if (state.type & 128 /* IS_PREFIX */) {
        next();
        parseMaybeUnary();
        return false;
    }
    const wasArrow = parseExprSubscripts();
    if (wasArrow) {
        return true;
    }
    while (state.type & 256 /* IS_POSTFIX */ && !canInsertSemicolon()) {
        next();
    }
    return false;
}
// Parse call, dot, and `[]`-subscript expressions.
// Returns true if this was an arrow function.
export function parseExprSubscripts() {
    const startPos = state.start;
    const wasArrow = parseExprAtom();
    if (wasArrow) {
        return true;
    }
    parseSubscripts(startPos);
    return false;
}
function parseSubscripts(startPos, noCalls = null) {
    if (hasPlugin("flow")) {
        flowParseSubscripts(startPos, noCalls);
    }
    else {
        baseParseSubscripts(startPos, noCalls);
    }
}
export function baseParseSubscripts(startPos, noCalls = null) {
    const stopState = { stop: false };
    do {
        parseSubscript(startPos, noCalls, stopState);
    } while (!stopState.stop);
}
function parseSubscript(startPos, noCalls, stopState) {
    if (hasPlugin("typescript")) {
        tsParseSubscript(startPos, noCalls, stopState);
    }
    else {
        baseParseSubscript(startPos, noCalls, stopState);
    }
}
/** Set 'state.stop = true' to indicate that we should stop parsing subscripts. */
export function baseParseSubscript(startPos, noCalls, stopState) {
    if (!noCalls && eat(8704 /* doubleColon */)) {
        parseNoCallExpr();
        stopState.stop = true;
        parseSubscripts(startPos, noCalls);
    }
    else if (match(10240 /* questionDot */)) {
        if (noCalls && lookaheadType() === 6144 /* parenL */) {
            stopState.stop = true;
            return;
        }
        next();
        if (eat(3072 /* bracketL */)) {
            parseExpression();
            expect(3584 /* bracketR */);
        }
        else if (eat(6144 /* parenL */)) {
            parseCallExpressionArguments(6656 /* parenR */);
        }
        else {
            parseIdentifier();
        }
    }
    else if (eat(9216 /* dot */)) {
        parseMaybePrivateName();
    }
    else if (eat(3072 /* bracketL */)) {
        parseExpression();
        expect(3584 /* bracketR */);
    }
    else if (!noCalls && match(6144 /* parenL */)) {
        const possibleAsync = atPossibleAsync();
        // We see "async", but it's possible it's a usage of the name "async". Parse as if it's a
        // function call, and if we see an arrow later, backtrack and re-parse as a parameter list.
        const snapshotForAsyncArrow = possibleAsync ? state.snapshot() : null;
        const startTokenIndex = state.tokens.length;
        next();
        const callContextId = getNextContextId();
        state.tokens[state.tokens.length - 1].contextId = callContextId;
        parseCallExpressionArguments(6656 /* parenR */);
        state.tokens[state.tokens.length - 1].contextId = callContextId;
        if (possibleAsync && shouldParseAsyncArrow()) {
            // We hit an arrow, so backtrack and start again parsing function parameters.
            state.restoreFromSnapshot(snapshotForAsyncArrow);
            stopState.stop = true;
            parseFunctionParams();
            parseAsyncArrowFromCallExpression(startPos, startTokenIndex);
        }
    }
    else if (match(12288 /* backQuote */)) {
        // Tagged template expression.
        parseTemplate();
    }
    else {
        stopState.stop = true;
    }
}
export function atPossibleAsync() {
    // This was made less strict than the original version to avoid passing around nodes, but it
    // should be safe to have rare false positives here.
    return (state.tokens[state.tokens.length - 1].contextualKeyword === 3 /* _async */ &&
        !canInsertSemicolon());
}
export function parseCallExpressionArguments(close) {
    let first = true;
    while (!eat(close)) {
        if (first) {
            first = false;
        }
        else {
            expect(7168 /* comma */);
            if (eat(close))
                break;
        }
        parseExprListItem(false);
    }
}
function shouldParseAsyncArrow() {
    return match(8192 /* colon */) || match(10752 /* arrow */);
}
function parseAsyncArrowFromCallExpression(functionStart, startTokenIndex) {
    if (hasPlugin("typescript")) {
        tsStartParseAsyncArrowFromCallExpression();
    }
    else if (hasPlugin("flow")) {
        flowStartParseAsyncArrowFromCallExpression();
    }
    expect(10752 /* arrow */);
    parseArrowExpression(functionStart, startTokenIndex);
}
// Parse a no-call expression (like argument of `new` or `::` operators).
function parseNoCallExpr() {
    const startPos = state.start;
    parseExprAtom();
    parseSubscripts(startPos, true);
}
// Parse an atomic expression â€” either a single token that is an
// expression, an expression started by a keyword like `function` or
// `new`, or an expression wrapped in punctuation like `()`, `[]`,
// or `{}`.
// Returns true if the parsed expression was an arrow function.
export function parseExprAtom() {
    if (match(26624 /* jsxText */)) {
        parseLiteral();
        return false;
    }
    else if (match(21000 /* lessThan */) && hasPlugin("jsx")) {
        state.type = 27136 /* jsxTagStart */;
        jsxParseElement();
        next();
        return false;
    }
    const canBeArrow = state.potentialArrowAt === state.start;
    switch (state.type) {
        case 25099 /* slash */:
        case 14880 /* assign */:
            retokenizeSlashAsRegex();
        // Fall through.
        case 40976 /* _super */:
        case 40464 /* _this */:
        case 1024 /* regexp */:
        case 0 /* num */:
        case 512 /* bigint */:
        case 1536 /* string */:
        case 44048 /* _null */:
        case 44560 /* _true */:
        case 45072 /* _false */:
            next();
            return false;
        case 43024 /* _import */:
            if (lookaheadType() === 9216 /* dot */) {
                parseImportMetaProperty();
                return false;
            }
            next();
            return false;
        case 2048 /* name */: {
            const startTokenIndex = state.tokens.length;
            const functionStart = state.start;
            const contextualKeyword = state.contextualKeyword;
            parseIdentifier();
            if (contextualKeyword === 4 /* _await */) {
                parseAwait();
                return false;
            }
            else if (contextualKeyword === 3 /* _async */ &&
                match(34320 /* _function */) &&
                !canInsertSemicolon()) {
                next();
                parseFunction(functionStart, false, false);
                return false;
            }
            else if (canBeArrow && contextualKeyword === 3 /* _async */ && match(2048 /* name */)) {
                parseIdentifier();
                expect(10752 /* arrow */);
                // let foo = bar => {};
                parseArrowExpression(functionStart, startTokenIndex);
                return true;
            }
            if (canBeArrow && !canInsertSemicolon() && eat(10752 /* arrow */)) {
                parseArrowExpression(functionStart, startTokenIndex);
                return true;
            }
            state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.Access;
            return false;
        }
        case 32272 /* _do */: {
            next();
            parseBlock(false);
            return false;
        }
        case 6144 /* parenL */: {
            const wasArrow = parseParenAndDistinguishExpression(canBeArrow);
            return wasArrow;
        }
        case 3072 /* bracketL */:
            next();
            parseExprList(3584 /* bracketR */, true);
            return false;
        case 4096 /* braceL */:
            parseObj(false, false);
            return false;
        case 34320 /* _function */:
            parseFunctionExpression();
            return false;
        case 13312 /* at */:
            parseDecorators();
        // Fall through.
        case 41488 /* _class */:
            parseClass(false);
            return false;
        case 39952 /* _new */:
            parseNew();
            return false;
        case 12288 /* backQuote */:
            parseTemplate();
            return false;
        case 8704 /* doubleColon */: {
            next();
            parseNoCallExpr();
            return false;
        }
        default:
            throw unexpected();
    }
}
function parseMaybePrivateName() {
    eat(13824 /* hash */);
    parseIdentifier();
}
function parseFunctionExpression() {
    const functionStart = state.start;
    parseIdentifier();
    if (eat(9216 /* dot */)) {
        // function.sent
        parseMetaProperty();
    }
    parseFunction(functionStart, false);
}
function parseMetaProperty() {
    parseIdentifier();
}
function parseImportMetaProperty() {
    parseIdentifier();
    expect(9216 /* dot */);
    // import.meta
    parseMetaProperty();
}
export function parseLiteral() {
    next();
}
export function parseParenExpression() {
    expect(6144 /* parenL */);
    parseExpression();
    expect(6656 /* parenR */);
}
// Returns true if this was an arrow expression.
function parseParenAndDistinguishExpression(canBeArrow) {
    // Assume this is a normal parenthesized expression, but if we see an arrow, we'll bail and
    // start over as a parameter list.
    const snapshot = state.snapshot();
    const startTokenIndex = state.tokens.length;
    expect(6144 /* parenL */);
    const exprList = [];
    let first = true;
    let spreadStart;
    let optionalCommaStart;
    while (!match(6656 /* parenR */)) {
        if (first) {
            first = false;
        }
        else {
            expect(7168 /* comma */);
            if (match(6656 /* parenR */)) {
                optionalCommaStart = state.start;
                break;
            }
        }
        if (match(11776 /* ellipsis */)) {
            spreadStart = state.start;
            parseRest(false /* isBlockScope */);
            parseParenItem();
            if (match(7168 /* comma */) && lookaheadType() === 6656 /* parenR */) {
                raise(state.start, "A trailing comma is not permitted after the rest element");
            }
            break;
        }
        else {
            exprList.push(parseMaybeAssign(false, parseParenItem));
        }
    }
    expect(6656 /* parenR */);
    if (canBeArrow && shouldParseArrow()) {
        const wasArrow = parseArrow();
        if (wasArrow) {
            // It was an arrow function this whole time, so start over and parse it as params so that we
            // get proper token annotations.
            state.restoreFromSnapshot(snapshot);
            // We don't need to worry about functionStart for arrow functions, so just use something.
            const functionStart = state.start;
            // Don't specify a context ID because arrow function don't need a context ID.
            parseFunctionParams();
            parseArrow();
            parseArrowExpression(functionStart, startTokenIndex);
            return true;
        }
    }
    if (optionalCommaStart)
        unexpected(optionalCommaStart);
    if (spreadStart)
        unexpected(spreadStart);
    return false;
}
function shouldParseArrow() {
    return match(8192 /* colon */) || !canInsertSemicolon();
}
// Returns whether there was an arrow token.
export function parseArrow() {
    if (hasPlugin("typescript")) {
        return tsParseArrow();
    }
    else if (hasPlugin("flow")) {
        return flowParseArrow();
    }
    else {
        return eat(10752 /* arrow */);
    }
}
function parseParenItem() {
    if (hasPlugin("typescript") || hasPlugin("flow")) {
        typedParseParenItem();
    }
}
// New's precedence is slightly tricky. It must allow its argument to
// be a `[]` or dot subscript expression, but not a call â€” at least,
// not without wrapping it in parentheses. Thus, it uses the noCalls
// argument to parseSubscripts to prevent it from consuming the
// argument list.
function parseNew() {
    parseIdentifier();
    if (eat(9216 /* dot */)) {
        // new.target
        parseMetaProperty();
        return;
    }
    parseNoCallExpr();
    eat(10240 /* questionDot */);
    parseNewArguments();
}
function parseNewArguments() {
    if (hasPlugin("typescript")) {
        tsStartParseNewArguments();
    }
    if (eat(6144 /* parenL */)) {
        parseExprList(6656 /* parenR */);
    }
}
function parseTemplate() {
    // Finish `, read quasi
    nextTemplateToken();
    // Finish quasi, read ${
    nextTemplateToken();
    while (!match(12288 /* backQuote */)) {
        expect(12800 /* dollarBraceL */);
        parseExpression();
        // Finish }, read quasi
        nextTemplateToken();
        // Finish quasi, read either ${ or `
        nextTemplateToken();
    }
    next();
}
// Parse an object literal or binding pattern.
export function parseObj(isPattern, isBlockScope) {
    // Attach a context ID to the object open and close brace and each object key.
    const contextId = getNextContextId();
    let first = true;
    next();
    state.tokens[state.tokens.length - 1].contextId = contextId;
    let firstRestLocation = null;
    while (!eat(5120 /* braceR */)) {
        if (first) {
            first = false;
        }
        else {
            expect(7168 /* comma */);
            if (eat(5120 /* braceR */)) {
                break;
            }
        }
        let isGenerator = false;
        if (match(11776 /* ellipsis */)) {
            // Note that this is labeled as an access on the token even though it might be an
            // assignment.
            parseSpread();
            if (isPattern) {
                const position = state.start;
                if (firstRestLocation !== null) {
                    unexpected(firstRestLocation, "Cannot have multiple rest elements when destructuring");
                }
                else if (eat(5120 /* braceR */)) {
                    break;
                }
                else if (match(7168 /* comma */) && lookaheadType() === 5120 /* braceR */) {
                    unexpected(position, "A trailing comma is not permitted after the rest element");
                }
                else {
                    firstRestLocation = position;
                    continue;
                }
            }
            else {
                continue;
            }
        }
        if (!isPattern) {
            isGenerator = eat(24587 /* star */);
        }
        if (!isPattern && isContextual(3 /* _async */)) {
            if (isGenerator)
                unexpected();
            parseIdentifier();
            if (match(8192 /* colon */) ||
                match(6144 /* parenL */) ||
                match(5120 /* braceR */) ||
                match(14368 /* eq */) ||
                match(7168 /* comma */)) {
                // This is a key called "async" rather than an async function.
            }
            else {
                if (match(24587 /* star */)) {
                    next();
                    isGenerator = true;
                }
                parsePropertyName(contextId);
            }
        }
        else {
            parsePropertyName(contextId);
        }
        parseObjPropValue(isGenerator, isPattern, isBlockScope, contextId);
    }
    state.tokens[state.tokens.length - 1].contextId = contextId;
}
function isGetterOrSetterMethod(isPattern) {
    // We go off of the next and don't bother checking if the node key is actually "get" or "set".
    // This lets us avoid generating a node, and should only make the validation worse.
    return (!isPattern &&
        (match(1536 /* string */) || // get "string"() {}
            match(0 /* num */) || // get 1() {}
            match(3072 /* bracketL */) || // get ["string"]() {}
            match(2048 /* name */) || // get foo() {}
            !!(state.type & 16 /* IS_KEYWORD */)) // get debugger() {}
    );
}
// Returns true if this was a method.
function parseObjectMethod(isGenerator, isPattern, objectContextId) {
    // We don't need to worry about modifiers because object methods can't have optional bodies, so
    // the start will never be used.
    const functionStart = state.start;
    if (match(6144 /* parenL */)) {
        if (isPattern)
            unexpected();
        parseMethod(functionStart, isGenerator, /* isConstructor */ false);
        return true;
    }
    if (isGetterOrSetterMethod(isPattern)) {
        parsePropertyName(objectContextId);
        parseMethod(functionStart, /* isGenerator */ false, /* isConstructor */ false);
        return true;
    }
    return false;
}
function parseObjectProperty(isPattern, isBlockScope) {
    if (eat(8192 /* colon */)) {
        if (isPattern) {
            parseMaybeDefault(isBlockScope);
        }
        else {
            parseMaybeAssign(false);
        }
        return;
    }
    // Since there's no colon, we assume this is an object shorthand.
    // If we're in a destructuring, we've now discovered that the key was actually an assignee, so
    // we need to tag it as a declaration with the appropriate scope. Otherwise, we might need to
    // transform it on access, so mark it as an object shorthand.
    if (isPattern) {
        state.tokens[state.tokens.length - 1].identifierRole = isBlockScope
            ? IdentifierRole.BlockScopedDeclaration
            : IdentifierRole.FunctionScopedDeclaration;
    }
    else {
        state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ObjectShorthand;
    }
    // Regardless of whether we know this to be a pattern or if we're in an ambiguous context, allow
    // parsing as if there's a default value.
    parseMaybeDefault(isBlockScope, true);
}
function parseObjPropValue(isGenerator, isPattern, isBlockScope, objectContextId) {
    if (hasPlugin("typescript")) {
        tsStartParseObjPropValue();
    }
    else if (hasPlugin("flow")) {
        flowStartParseObjPropValue();
    }
    const wasMethod = parseObjectMethod(isGenerator, isPattern, objectContextId);
    if (!wasMethod) {
        parseObjectProperty(isPattern, isBlockScope);
    }
}
export function parsePropertyName(objectContextId) {
    if (hasPlugin("flow")) {
        flowParseVariance();
    }
    if (eat(3072 /* bracketL */)) {
        state.tokens[state.tokens.length - 1].contextId = objectContextId;
        parseMaybeAssign();
        expect(3584 /* bracketR */);
        state.tokens[state.tokens.length - 1].contextId = objectContextId;
    }
    else {
        if (match(0 /* num */) || match(1536 /* string */)) {
            parseExprAtom();
        }
        else {
            parseMaybePrivateName();
        }
        state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ObjectKey;
        state.tokens[state.tokens.length - 1].contextId = objectContextId;
    }
}
// Parse object or class method.
export function parseMethod(functionStart, isGenerator, isConstructor) {
    const funcContextId = getNextContextId();
    const startTokenIndex = state.tokens.length;
    const allowModifiers = isConstructor; // For TypeScript parameter properties
    parseFunctionParams(allowModifiers, funcContextId);
    parseFunctionBodyAndFinish(functionStart, isGenerator, null /* allowExpressionBody */, funcContextId);
    const endTokenIndex = state.tokens.length;
    state.scopes.push({ startTokenIndex, endTokenIndex, isFunctionScope: true });
}
// Parse arrow function expression.
// If the parameters are provided, they will be converted to an
// assignable list.
export function parseArrowExpression(functionStart, startTokenIndex) {
    parseFunctionBody(functionStart, false /* isGenerator */, true);
    const endTokenIndex = state.tokens.length;
    state.scopes.push({ startTokenIndex, endTokenIndex, isFunctionScope: true });
}
export function parseFunctionBodyAndFinish(functionStart, isGenerator, allowExpressionBody = null, funcContextId) {
    if (hasPlugin("typescript")) {
        tsParseFunctionBodyAndFinish(functionStart, isGenerator, allowExpressionBody, funcContextId);
    }
    else if (hasPlugin("flow")) {
        flowParseFunctionBodyAndFinish(functionStart, isGenerator, allowExpressionBody, funcContextId);
    }
    else {
        parseFunctionBody(functionStart, isGenerator, allowExpressionBody, funcContextId);
    }
}
// Parse function body and check parameters.
export function parseFunctionBody(functionStart, isGenerator, allowExpression, funcContextId) {
    const isExpression = allowExpression && !match(4096 /* braceL */);
    if (isExpression) {
        parseMaybeAssign();
    }
    else {
        parseBlock(true /* allowDirectives */, true /* isFunctionScope */, funcContextId);
    }
}
// Parses a comma-separated list of expressions, and returns them as
// an array. `close` is the token type that ends the list, and
// `allowEmpty` can be turned on to allow subsequent commas with
// nothing in between them to be parsed as `null` (which is needed
// for array literals).
function parseExprList(close, allowEmpty = null) {
    let first = true;
    while (!eat(close)) {
        if (first) {
            first = false;
        }
        else {
            expect(7168 /* comma */);
            if (eat(close))
                break;
        }
        parseExprListItem(allowEmpty);
    }
}
function parseExprListItem(allowEmpty) {
    if (allowEmpty && match(7168 /* comma */)) {
        // Empty item; nothing more to parse for this item.
    }
    else if (match(11776 /* ellipsis */)) {
        parseSpread();
        parseParenItem();
    }
    else {
        parseMaybeAssign(false, parseParenItem);
    }
}
// Parse the next token as an identifier.
export function parseIdentifier() {
    next();
    state.tokens[state.tokens.length - 1].type = 2048 /* name */;
}
// Parses await expression inside async function.
function parseAwait() {
    parseMaybeUnary();
}
// Parses yield expression inside generator.
function parseYield() {
    next();
    if (!match(7680 /* semi */) && !canInsertSemicolon()) {
        eat(24587 /* star */);
        parseMaybeAssign();
    }
}

import { eat, lookaheadTypeAndKeyword, match } from "../tokenizer";
import { formatTokenType } from "../tokenizer/types";
import { lineBreak } from "../util/whitespace";
import { input, raise, state } from "./base";
// ## Parser utilities
// Tests whether parsed token is a contextual keyword.
export function isContextual(contextualKeyword) {
    return state.contextualKeyword === contextualKeyword;
}
export function isLookaheadContextual(contextualKeyword) {
    const l = lookaheadTypeAndKeyword();
    return l.type === 2048 /* name */ && l.contextualKeyword === contextualKeyword;
}
// Consumes contextual keyword if possible.
export function eatContextual(contextualKeyword) {
    return state.contextualKeyword === contextualKeyword && eat(2048 /* name */);
}
// Asserts that following token is given contextual keyword.
export function expectContextual(contextualKeyword) {
    if (!eatContextual(contextualKeyword)) {
        unexpected(null);
    }
}
// Test whether a semicolon can be inserted at the current position.
export function canInsertSemicolon() {
    return match(2560 /* eof */) || match(5120 /* braceR */) || hasPrecedingLineBreak();
}
export function hasPrecedingLineBreak() {
    const prevToken = state.tokens[state.tokens.length - 1];
    const lastTokEnd = prevToken ? prevToken.end : 0;
    return lineBreak.test(input.slice(lastTokEnd, state.start));
}
export function isLineTerminator() {
    return eat(7680 /* semi */) || canInsertSemicolon();
}
// Consume a semicolon, or, failing that, see if we are allowed to
// pretend that there is a semicolon at this position.
export function semicolon() {
    if (!isLineTerminator())
        unexpected(null, 7680 /* semi */);
}
// Expect a token of a given type. If found, consume it, otherwise,
// raise an unexpected token error at given pos.
export function expect(type, pos) {
    const matched = eat(type);
    if (!matched) {
        unexpected(pos, type);
    }
}
// Raise an unexpected token error. Can take the expected token type
// instead of a message string.
export function unexpected(pos = null, messageOrType = "Unexpected token") {
    if (typeof messageOrType !== "string") {
        messageOrType = `Unexpected token, expected "${formatTokenType(messageOrType)}"`;
    }
    throw raise(pos != null ? pos : state.start, messageOrType);
}

import LinesAndColumns from "lines-and-columns";
import State from "../tokenizer/state";
export let plugins;
export let state;
export let input;
export let nextContextId;
export function getNextContextId() {
    return nextContextId++;
}
export function hasPlugin(name) {
    return Boolean(plugins[name]);
}
// This function is used to raise exceptions on parse errors. It
// takes an offset integer (into the current `input`) to indicate
// the location of the error, attaches the position to the end
// of the error message, and then raises a `SyntaxError` with that
// message.
export function raise(pos, message) {
    let loc = new LinesAndColumns(input).locationForIndex(pos);
    if (!loc) {
        loc = { line: 0, column: 0 };
    }
    message += ` (${loc.line}:${loc.column})`;
    // tslint:disable-next-line no-any
    const err = new SyntaxError(message);
    err.pos = pos;
    err.loc = loc;
    throw err;
}
export function initParser(inputCode, pluginList) {
    input = inputCode;
    state = new State();
    state.init();
    nextContextId = 1;
    plugins = pluginList.reduce((obj, p) => (Object.assign({}, obj, { [p]: true })), {});
}

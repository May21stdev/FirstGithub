"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lines_and_columns_1 = require("lines-and-columns");
const state_1 = require("../tokenizer/state");
function getNextContextId() {
    return exports.nextContextId++;
}
exports.getNextContextId = getNextContextId;
function hasPlugin(name) {
    return Boolean(exports.plugins[name]);
}
exports.hasPlugin = hasPlugin;
// This function is used to raise exceptions on parse errors. It
// takes an offset integer (into the current `input`) to indicate
// the location of the error, attaches the position to the end
// of the error message, and then raises a `SyntaxError` with that
// message.
function raise(pos, message) {
    let loc = new lines_and_columns_1.default(exports.input).locationForIndex(pos);
    if (!loc) {
        loc = { line: 0, column: 0 };
    }
    message += ` (${loc.line}:${loc.column})`;
    // tslint:disable-next-line no-any
    const err = new SyntaxError(message);
    err.pos = pos;
    err.loc = loc;
    throw err;
}
exports.raise = raise;
function initParser(inputCode, pluginList) {
    exports.input = inputCode;
    exports.state = new state_1.default();
    exports.state.init();
    exports.nextContextId = 1;
    exports.plugins = pluginList.reduce((obj, p) => (Object.assign({}, obj, { [p]: true })), {});
}
exports.initParser = initParser;

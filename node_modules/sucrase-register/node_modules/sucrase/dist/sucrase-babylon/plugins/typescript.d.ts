import { ContextualKeyword } from "../tokenizer";
export declare type TsModifier = ContextualKeyword._readonly | ContextualKeyword._abstract | ContextualKeyword._static | ContextualKeyword._public | ContextualKeyword._private | ContextualKeyword._protected;
export declare type ParsingContext = "EnumMembers" | "HeritageClauseElement" | "TupleElementTypes" | "TypeMembers" | "TypeParametersOrArguments";
/** Parses a modifier matching one the given modifier names. */
export declare function tsParseModifier<T extends TsModifier>(allowedModifiers: Array<T>): T | null;
export declare function tsTryParseTypeParameters(): void;
export declare function tsTryParseTypeAnnotation(): void;
export declare function tsParseTypeAnnotation(): void;
export declare function tsParseType(): void;
export declare function tsParseNonConditionalType(): void;
export declare function tsParseTypeAssertion(): void;
export declare function tsParseImportEqualsDeclaration(): void;
export declare function tsIsDeclarationStart(): boolean;
export declare function tsParseFunctionBodyAndFinish(functionStart: number, isGenerator: boolean, allowExpressionBody?: boolean | null, funcContextId?: number): void;
export declare function tsParseSubscript(startPos: number, noCalls: boolean | null, stopState: {
    stop: boolean;
}): void;
export declare function tsStartParseNewArguments(): void;
export declare function tsTryParseExport(): boolean;
export declare function tsTryParseExportDefaultExpression(): boolean;
export declare function tsTryParseStatementContent(): boolean;
export declare function tsParseAccessModifier(): void;
export declare function tsTryParseClassMemberWithIsStatic(isStatic: boolean, classContextId: number): boolean;
export declare function tsParseIdentifierStatement(contextualKeyword: ContextualKeyword): void;
export declare function tsParseExportDeclaration(): void;
export declare function tsAfterParseClassSuper(hasSuper: boolean): void;
export declare function tsStartParseObjPropValue(): void;
export declare function tsStartParseFunctionParams(): void;
export declare function tsAfterParseVarHead(): void;
export declare function tsStartParseAsyncArrowFromCallExpression(): void;
export declare function tsParseMaybeAssign(noIn?: boolean | null, afterLeftParse?: Function): boolean;
export declare function tsParseArrow(): boolean;
export declare function tsParseAssignableListItemTypes(): void;
